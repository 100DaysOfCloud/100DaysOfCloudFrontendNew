AWSTemplateFormatVersion: '2010-09-09'
Description: 100DaysofCloud Cognito
Parameters:
  AuthName:
    Type: String
    Description: Unique Auth Name for Resources
  LambdaBucketName:
    Type: String
    Description: Bucket containing Lambda deployment zip
  LambdaZipKey:
    Type: String
    Description: Name of the Zip file containing lambda code

Resources:
  SNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"
  UserPool:
    Type: "AWS::Cognito::UserPool"
    DependsOn: CognitoLambda
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: twitter
          AttributeDataType: String
          Mutable: true
      LambdaConfig:
        PostConfirmation: !GetAtt CognitoLambda.Arn
      SmsConfiguration:
        ExternalId: !Sub ${AuthName}-external
        SnsCallerArn: !GetAtt SNSRole.Arn
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: true
      UserPoolId: !Ref UserPool
      CallbackURLs: [ 'https://100daysofcloud.com/token' ]
      LogoutURLs: [ 'https://100daysofcloud.com' ]
      AllowedOAuthFlows: [ 'implicit' ]
      AllowedOAuthScopes: [ 'email', 'openid', 'profile']
      SupportedIdentityProviders: [ 'COGNITO' ]
      AllowedOAuthFlowsUserPoolClient: True
  UserPoolDomain:
    Type: "AWS::Cognito::UserPoolDomain"
    Properties:
      Domain: '100daysofcloud-live'
      UserPoolId: !Ref UserPool
  CognitoLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Adds new cognito sign-ups to DynamoDB in production"
      Code:
        S3Bucket: !Ref LambdaBucketName
        S3Key: !Ref LambdaZipKey
      Role: !GetAtt
        - CognitoLambdaRole
        - Arn
      Timeout: 60
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Environment:
        Variables:
          TABLE_NAME: !Ref UserTable
          REGION: 'us-east-1'

  UserPoolLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: cognito-idp.amazonaws.com
      FunctionName: !Ref CognitoLambda
      SourceArn: !GetAtt UserPool.Arn

  CognitoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/AmazonCognitoDeveloperAuthenticatedIdentities
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"

